<html>
  <head>
    <title>W15:Last Task</title>
  </head>
  <body style="margin:0">
    <script src="three.min.js"></script>
    <script src="Lut.js"></script>
    <script src="TrackballControls.js"></script>
    <script src="KVS.min.js"></script>
    <script src="KVS2THREE.min.js"></script>
    <script src="KVSLobsterData.js"></script>
    <script src="Bounds.js"></script>
    <script src="Isosurfaces_last.js"></script>

    <div id="display" style="width: 80%; float: left;"></div>
    
    <div id="controller" style="width: 20%; float: left;">
      <label id="label" style="font-family:Arial;>"></label>
      <input type="range" min="0" max="255" step="1" value="1"
	     id="isovalue"/>
      <button id="change-isovalue-button" style="font-family-Arial;">
	Apply</button>
    </div>
    
    <script type="x-shader/x-vertex" id="phong_PhongReflection.vert">
      varying vec3 point_color;
      varying vec4 point_position;
      varying vec3 normal_vector;
      
      void main()
      {
      point_color = color;
      point_position = modelViewMatrix * vec4(position, 1.0);
      normal_vector = normalMatrix * normal;

      gl_Position = projectionMatrix * point_position;
      }
    </script>

    <script type="x-shader/x-fragment" id="phong_PhongReflection.frag">
      varying vec3 point_color;
      varying vec4 point_position;
      varying vec3 normal_vector;
      uniform vec3 light_position; 


      vec3 PhongReflection(vec3 C, vec3 L, vec3 N)
      {
      float ka = 0.3;
      float kd = 0.5;
      float ks = 0.8;
      float n = 50.0;


      
      vec3 V = -normalize(point_position.xyz);
      vec3 V1 = normalize(L + V);

      float dd = max(dot(N,L),0.0);

      float ds = pow(max(dot(N,V1),0.0),n);

      if(dd<=0.0) {ds = 0.0;}
		  

		  float Ia = ka;
		  float Id = kd * dd;
		  float Is = ks * ds;
		  return C * (Ia + Id + Is);
		  }
		  
		  void main()
		  {
		  vec3 C = point_color;
		  vec3 L = normalize(light_position - point_position.xyz);
		  vec3 N = normalize(normal_vector);

		  vec3 shaded_color = PhongReflection(C,L,N);

		  gl_FragColor = vec4(shaded_color, 1.0);
		  }
		  </script>
    
    <script src="main_last.js"></script>
    <script>
      main();
    </script>
  </body>
</html>
